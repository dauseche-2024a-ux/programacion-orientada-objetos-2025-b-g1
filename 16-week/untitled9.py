# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XY4Xoaxbg4TUVcQIkt3rEL33nTZf3r2Z
"""

# ===============================================
# 🚛 Sistema de Gestión de Transporte (POO - Python)
# ===============================================
# Este código demuestra los principios de la Programación Orientada a Objetos:
# - Abstracción
# - Herencia
# - Encapsulamiento
# - Polimorfismo

from abc import ABC, abstractmethod

# -----------------------------------------------
# CLASES DE VEHÍCULOS
# -----------------------------------------------
class Vehicle(ABC):
    """Clase abstracta que define la estructura general de un vehículo."""
    def __init__(self, plate: str, capacity: int):
        self._plate = plate
        self._capacity = capacity
        self._odometer = 0
        self._assigned_driver = None

    @property
    def plate(self):
        return self._plate

    @property
    def capacity(self):
        return self._capacity

    @property
    def odometer(self):
        return self._odometer

    def _increase_odometer(self, km: int):
        if km > 0:
            self._odometer += km

    def assign_driver(self, driver):
        self._assigned_driver = driver

    def unassign_driver(self):
        self._assigned_driver = None

    @property
    def assigned_driver(self):
        return self._assigned_driver

    @abstractmethod
    def start_engine(self):
        pass

    @abstractmethod
    def drive(self, km: int):
        pass

    @abstractmethod
    def needs_maintenance(self) -> bool:
        pass

    @abstractmethod
    def vehicle_type(self) -> str:
        pass


class LandVehicle(Vehicle):
    def __init__(self, plate: str, capacity: int, wheels: int):
        super().__init__(plate, capacity)
        self._wheels = wheels

    @property
    def wheels(self):
        return self._wheels

    def vehicle_type(self) -> str:
        return f"LandVehicle ({self._wheels} wheels)"


class Car(LandVehicle):
    MAINTENANCE_THRESHOLD = 10000

    def __init__(self, plate: str, capacity: int, doors: int = 4):
        super().__init__(plate, capacity, wheels=4)
        self._doors = doors

    def start_engine(self):
        return f"Car {self.plate}: arrancando motor con llave electrónica."

    def drive(self, km: int):
        if km <= 0:
            return "Distancia inválida."
        self._increase_odometer(km)
        return f"Car {self.plate} ha recorrido {km} km. Odómetro: {self.odometer} km."

    def needs_maintenance(self) -> bool:
        return self.odometer >= Car.MAINTENANCE_THRESHOLD

    def vehicle_type(self) -> str:
        return "Car"


class Motorcycle(LandVehicle):
    MAINTENANCE_THRESHOLD = 5000

    def __init__(self, plate: str, capacity: int):
        super().__init__(plate, capacity, wheels=2)

    def start_engine(self):
        return f"Motorcycle {self.plate}: arrancando con botón y patada virtual."

    def drive(self, km: int):
        if km <= 0:
            return "Distancia inválida."
        self._increase_odometer(km)
        return f"Motorcycle {self.plate} ha recorrido {km} km. Odómetro: {self.odometer} km."

    def needs_maintenance(self) -> bool:
        return self.odometer >= Motorcycle.MAINTENANCE_THRESHOLD

    def vehicle_type(self) -> str:
        return "Motorcycle"


class Truck(LandVehicle):
    MAINTENANCE_THRESHOLD = 15000

    def __init__(self, plate: str, capacity: int, max_load_tons: float):
        super().__init__(plate, capacity, wheels=6)
        self._max_load_tons = max_load_tons

    def start_engine(self):
        return f"Truck {self.plate}: arrancando motor diésel pesado."

    def drive(self, km: int):
        if km <= 0:
            return "Distancia inválida."
        self._increase_odometer(km)
        return f"Truck {self.plate} ha recorrido {km} km. Odómetro: {self.odometer} km."

    def needs_maintenance(self) -> bool:
        return self.odometer >= Truck.MAINTENANCE_THRESHOLD

    def vehicle_type(self) -> str:
        return "Truck"


# -----------------------------------------------
# CLASES DE EMPLEADOS
# -----------------------------------------------
class Employee(ABC):
    def __init__(self, name: str, employee_id: str):
        self._name = name
        self._employee_id = employee_id
        self._assigned_vehicle = None

    @property
    def name(self):
        return self._name

    @property
    def employee_id(self):
        return self._employee_id

    @property
    def assigned_vehicle(self):
        return self._assigned_vehicle

    def assign_vehicle(self, vehicle):
        self._assigned_vehicle = vehicle
        vehicle.assign_driver(self)

    def unassign_vehicle(self):
        if self._assigned_vehicle:
            self._assigned_vehicle.unassign_driver()
        self._assigned_vehicle = None

    @abstractmethod
    def perform_duty(self, *args, **kwargs):
        pass


class Driver(Employee):
    def __init__(self, name: str, employee_id: str, license_type: str):
        super().__init__(name, employee_id)
        self._license_type = license_type

    @property
    def license_type(self):
        return self._license_type

    def perform_duty(self, km: int):
        if not self.assigned_vehicle:
            return f"Driver {self.name}: no tiene vehículo asignado."
        result = self.assigned_vehicle.drive(km)
        return f"Driver {self.name} condujo: {result}"


class Mechanic(Employee):
    def __init__(self, name: str, employee_id: str, specialization: str = None):
        super().__init__(name, employee_id)
        self._specialization = specialization

    @property
    def specialization(self):
        return self._specialization

    def perform_duty(self, vehicle):
        if vehicle is None:
            return f"Mechanic {self.name}: no se proporcionó vehículo."
        if vehicle.needs_maintenance():
            vehicle._odometer = 0
            return f"Mechanic {self.name} realizó mantenimiento en {vehicle.vehicle_type()} {vehicle.plate}."
        else:
            return f"Mechanic {self.name}: {vehicle.vehicle_type()} {vehicle.plate} no necesita mantenimiento."


# -----------------------------------------------
# BLOQUE PRINCIPAL
# -----------------------------------------------
def main():
    print("=== Sistema de Gestión de Transporte - DEMO ===\n")

    car1 = Car(plate="ABC123", capacity=4, doors=4)
    moto1 = Motorcycle(plate="MOTO9", capacity=1)
    truck1 = Truck(plate="TRK555", capacity=2, max_load_tons=15.0)

    driver1 = Driver(name="Carlos Perez", employee_id="D001", license_type="B")
    driver2 = Driver(name="Ana Gomez", employee_id="D002", license_type="A")
    mech1 = Mechanic(name="Luis Torres", employee_id="M001", specialization="Diesel")

    print("Asignando conductores a vehículos...")
    driver1.assign_vehicle(car1)
    driver2.assign_vehicle(moto1)
    print(f"{driver1.name} asignado a {driver1.assigned_vehicle.plate}")
    print(f"{driver2.name} asignado a {driver2.assigned_vehicle.plate}\n")

    print("Arranques de vehículos (polimorfismo):")
    print(car1.start_engine())
    print(moto1.start_engine())
    print(truck1.start_engine(), "\n")

    print("Simulación de viajes:")
    print(driver1.perform_duty(5000))
    print(driver2.perform_duty(6000))
    print(driver1.perform_duty(6000))
    print("\nEstados de odómetro:")
    print(f"Car {car1.plate}: {car1.odometer} km")
    print(f"Motorcycle {moto1.plate}: {moto1.odometer} km\n")

    print("Mantenimiento:")
    print(mech1.perform_duty(car1))
    print(mech1.perform_duty(moto1))
    print("\nEstados tras mantenimiento:")
    print(f"Car {car1.plate}: {car1.odometer} km")
    print(f"Motorcycle {moto1.plate}: {moto1.odometer} km\n")

    print("=== Fin de la DEMO ===")

# Ejecutar
main()